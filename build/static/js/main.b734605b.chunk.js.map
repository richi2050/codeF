{"version":3,"sources":["initializer/firebase.js","Login.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","login","bind","assertThisInitialized","logout","state","userLoggedIn","photoURL","_this2","console","log","auth","onAuthStateChanged","user","setState","providerData","provider","GoogleAuthProvider","addScope","signInWithPopup","then","result","catch","err","signOut","res","react_default","a","createElement","Avatar_default","src","IconButton_default","color","onClick","ExitToApp_default","Button_default","variant","className","classes","container","LogInButton","Component","withStyles","display","flexDirection","NavBar","AppBar_default","Toolbar_default","grow","src_Login","flexGrow","nav","App","components_NavBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0QAYEA,IAASC,cATK,CACZC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,iBAINP,QAAf,qDCLIQ,cACF,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQP,EAAKO,MAAMC,KAAXP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACbA,EAAKU,OAASV,EAAKU,OAAOF,KAAZP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACdA,EAAKW,MAAQ,CACTC,cAAe,EACfC,SAAW,IANDb,mFAUC,IAAAc,EAAAX,KACfY,QAAQC,IAAI,qBACZ1B,EAAS2B,OAAOC,mBAAmB,SAACC,GAC7BA,GACCJ,QAAQC,IAAIG,GACZL,EAAKM,SAAS,CACVR,cAAe,EACfC,SAAUM,EAAKE,aAAa,GAAGR,YAGnCC,EAAKM,SAAS,CACVR,cAAe,EACfC,SAAU,uCAOtB,IAAIS,EAAW,IAAIhC,EAAS2B,KAAKM,mBACjCD,EAASE,SAAS,0DAClBlC,EAAS2B,OAAOQ,gBAAgBH,GAAUI,KAAK,SAAAC,MAG5CC,MAAO,SAACC,GACPd,QAAQC,IAAIa,sCAIhBvC,EAAS2B,OAAOa,UAAUJ,KAAM,SAAAK,GAAQhB,QAAQC,IAAIe,2CAKpD,OAAG5B,KAAKQ,MAAMC,aAGF,CAACoB,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,IAAKjC,KAAKQ,MAAME,WACxBmB,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAYK,MAAM,UAAWC,QAASpC,KAAKO,QAAQsB,EAAAC,EAAAC,cAACM,EAAAP,EAAD,QAKxDD,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAQS,QAAQ,YAAYJ,MAAM,UAAUC,QAASpC,KAAKI,OAA1D,0CAMR,OACIyB,EAAAC,EAAAC,cAAA,OAAKS,UAAWxC,KAAKJ,MAAM6C,QAAQC,WAC9B1C,KAAK2C,sBA9DFC,aAoELC,uBAAW,CACtBH,UAAY,CACJI,QAAU,OACVC,cAAe,QAHZF,CAIZlD,GC1EIqD,mLAEH,OACEnB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,KACID,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,KACID,EAAAC,EAAAC,cAAA,KAAGS,UAAWxC,KAAKJ,MAAM6C,QAAQU,MAAjC,UACAtB,EAAAC,EAAAC,cAACqB,EAAD,gBAPIR,aAePC,uBAAW,CACtBM,KAAM,CAACE,SAAS,GAChBC,IAAI,CAAEnB,MAAO,UAFFU,CAGZG,GCXYO,mLARX,OACE1B,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAACyB,EAAD,cAJUZ,aCSEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC","file":"static/js/main.b734605b.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\n\r\n const config = {\r\n    apiKey: \"AIzaSyA8asgYk_Hn7UGEkfaz6TqeiTuERD3aqoE\",\r\n    authDomain: \"albums-react-ddc10.firebaseapp.com\",\r\n    databaseURL: \"https://albums-react-ddc10.firebaseio.com\",\r\n    projectId: \"albums-react-ddc10\",\r\n    storageBucket: \"albums-react-ddc10.appspot.com\",\r\n    messagingSenderId: \"436479607898\"\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n  export default firebase;\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport firebase from './initializer/firebase';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ExitToApp from '@material-ui/icons/ExitToApp';\r\n\r\nclass Login extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.login = this.login.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n        this.state = {\r\n            userLoggedIn : false,\r\n            photoURL : ''\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log('componentdidmount');\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if(user){\r\n                console.log(user);\r\n                this.setState({\r\n                    userLoggedIn : true,\r\n                    photoURL: user.providerData[0].photoURL\r\n                });                 \r\n            }else{\r\n                this.setState({\r\n                    userLoggedIn : false,\r\n                    photoURL: \"\"\r\n                });        \r\n            }\r\n        });\r\n    }\r\n\r\n    login(){\r\n        let provider = new firebase.auth.GoogleAuthProvider();\r\n        provider.addScope('https://www.googleapis.com/auth/photoslibrary.readonly');\r\n        firebase.auth().signInWithPopup(provider).then(result => {\r\n            //console.log(result);\r\n             //let token = result.credential.accessToken;\r\n        }).catch( (err)=>{\r\n            console.log(err);\r\n        });\r\n    }\r\n    logout(){\r\n        firebase.auth().signOut().then( res => {console.log(res); });\r\n\r\n    }\r\n\r\n    LogInButton(){\r\n        if(this.state.userLoggedIn){\r\n            return (\r\n               \r\n                    [<Avatar src={this.state.photoURL} />,\r\n                    (<IconButton color=\"inherit\"  onClick={this.logout}><ExitToApp /></IconButton>)]\r\n               \r\n                );\r\n        }else{\r\n            return (\r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.login}>\r\n                    Login\r\n                </Button>);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={this.props.classes.container}>\r\n                {this.LogInButton()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles({\r\n    container : {\r\n            display : 'flex',\r\n            flexDirection: 'row'}\r\n})(Login);","import React, { Component } from 'react'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Login from '../Login';\r\n\r\n class NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n          <AppBar>\r\n              <Toolbar>\r\n                  <p className={this.props.classes.grow}>Albums</p>\r\n                  <Login />\r\n              </Toolbar>\r\n          </AppBar>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles({\r\n    grow: {flexGrow:1},\r\n    nav:{ color: 'white'}\r\n})(NavBar);\r\n","import React, { Component } from 'react';\r\nimport NavBar  from './components/NavBar';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <NavBar />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}